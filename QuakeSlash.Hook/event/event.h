/*Copyright (c) 2007 by Ben Sunshine-Hill

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.*/

#ifndef EVENT_H
#define EVENT_H

#define MAX_EVENT_ARGS 8

#include "FastDelegate.h"

#include <boost/noncopyable.hpp>
#include <boost/preprocessor/iteration.hpp>
#include <boost/preprocessor/repetition.hpp>
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/if.hpp>
#include <boost/preprocessor/comparison.hpp>
#include <boost/preprocessor/empty.hpp>
#include <boost/preprocessor/arithmetic.hpp>
#include <boost/preprocessor/logical.hpp>
#include <boost/preprocessor/comma_if.hpp>

#include <vector>
#include <utility>

namespace events
{
	namespace detail
	{
		template<typename T>
		struct Node
		{
			Node(T const& data, Node<T>* next) : next(next), refCount(0), data(data) { }
			Node<T>* next;
			// refCount is as follows:
			// n>0: Connection is still active, thanks to n holders
			// n<0: Event has been destroyed, but -n holders are left
			// n=0: Connection has been closed, but Event still exists
			int refCount;
			T data;
		};

		class NullType{};

	}

	class Connection
	{
	public:
		Connection() : m_node(0) { }
		template<typename DelegateType>
		explicit Connection(detail::Node<DelegateType>* m_node) : 
			m_node(reinterpret_cast<AnyNodeType*>(m_node))
		{
			if(m_node) 
			{
				m_node->refCount++;
			}
		}

		Connection(Connection const& c) : m_node(c.m_node && c.m_node->refCount > 0 ? c.m_node : 0)
		{
			if(m_node)
			{
				m_node->refCount++;
			}
		}

		Connection& operator=(Connection const& c)
		{
			if(&c == this) return *this;

			if(m_node)
			{
				if(m_node->refCount > 0)
				{
					m_node->refCount--;
				}
				else if(m_node->refCount < 0)
				{
					m_node->refCount++;
					if(m_node->refCount == 0)
					{
						delete m_node;
					}
				}
			}

			m_node = c.m_node && c.m_node->refCount > 0 ? c.m_node : 0;
			if(m_node)
			{
				m_node->refCount++;
			}

			return *this;
		}

		~Connection()
		{
			if(m_node)
			{
				if(m_node->refCount > 0)
				{
					m_node->refCount--;
				}
				else if(m_node->refCount < 0)
				{
					m_node->refCount++;
					if(m_node->refCount == 0)
					{
						delete m_node;
					}
				}
			}
		}

		bool Active() const
		{
			return m_node != NULL && m_node->refCount > 0;
		}

	private:
		typedef detail::Node<detail::NullType> AnyNodeType;
		AnyNodeType* m_node;

    #pragma warning( disable : 4396 )
		friend void std::swap<Connection>(Connection & left, Connection & right);
	};

	class ConnectionSet
	{
	public:
		void Add(Connection const& c)
		{
			m_connections.push_back(c);
		}

		void Clear()
		{
			m_connections.clear();
		}

	private:
		typedef std::vector<Connection> ConnectionContainer;
		ConnectionContainer m_connections;
	};

	template<BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT(MAX_EVENT_ARGS, typename T, detail::NullType)>
	class Event;

	class AutoTracked : private ConnectionSet
	{
	private:
		template<BOOST_PP_ENUM_PARAMS(MAX_EVENT_ARGS, typename T)>
		friend class Event;
	};


#define BOOST_PP_ITERATION_LIMITS (0, BOOST_PP_SUB(MAX_EVENT_ARGS,1))
#define BOOST_PP_FILENAME_1 "event_impl.hxx"
#include BOOST_PP_ITERATE()
#undef BOOST_PP_ITERATION_LIMITS
#undef BOOST_PP_FILENAME_1
#undef NULLTYPE_MACRO


}

namespace std
{
	template<>
	void swap<events::Connection>(events::Connection & left, events::Connection & right)
	{
		std::swap(left.m_node, right.m_node);
	}
}
#endif